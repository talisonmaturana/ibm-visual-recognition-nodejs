{"version":3,"sources":["hooks/useScript.js","components/Header/index.js","components/ImagePicker/index.js","components/Loader/index.js","components/UploadImage/index.js","components/ImagePanel/index.js","components/ImageContainer/index.js","components/ProgressBar/index.js","components/OutputContainer/index.js","components/Toast/index.js","components/ServiceContainer/index.js","components/ServiceContainer/utils.js","App.js","index.js"],"names":["useScript","url","useEffect","script","document","createElement","src","async","body","appendChild","removeChild","Header","description","title","Tile","className","defaultProps","links","ImagePicker","images","onClick","map","image","i","key","id","handleClick","alt","Loader","loadingMessage","UploadImage","onUpload","multiple","onDrop","acceptedFiles","getRootProps","getInputProps","ImagePanel","showLoader","viewerImage","pickerImages","onSelectTile","files","viewerType","ImageContainer","onSubmitImage","handleUnsupportedFormats","isClassifying","defaultImageUrl","useState","mainDisplayImage","setMainDisplayImage","tileId","selectedImage","image_file","submitSampleImage","includes","type","reader","FileReader","onabort","console","log","onerror","onload","imageData","result","image_data","readAsDataURL","submitUserImage","ProgressBar","num","progress","style","width","Math","abs","round","toFixed","formatNumber","OutputContainer","classifyResults","outputType","setOutputType","ContentSwitcher","onChange","e","name","selectedIndex","Switch","text","FormGroup","legendText","Accordion","item","class","score","enableClipboard","displayDataTypes","displayObjectSize","collapsed","collapseStringsAfterLength","theme","lineHeight","Toast","caption","children","hideAfterFirstDisplay","hideCloseButton","iconDescription","kind","lowContrast","onCloseButtonClick","role","subtitle","timeout","setId","hideToast","setHideToast","random","toString","substring","element","querySelector","undefined","window","localStorage","getItem","setItem","ServiceContainer","setIsClassifying","defaultResponse","results","setResults","error","setError","onClassify","a","fetch","method","headers","JSON","stringify","then","response","json","data","classifiers","catch","err","message","finally","sampleImages","classes","sort","b","slice","App","ReactDOM","render","getElementById"],"mappings":"gyCAiBeA,G,MAfG,SAAAC,GAChBC,qBAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UAOtC,OALAF,EAAOG,IAAML,EACbE,EAAOI,OAAQ,EAEfH,SAASI,KAAKC,YAAYN,GAEnB,WACLC,SAASI,KAAKE,YAAYP,MAE3B,CAACF,M,QCVOU,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,MAAhB,OACpB,kBAACC,EAAA,EAAD,CAAMC,UAAU,UACd,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,gBAAgBF,GAC9B,2BAAID,MAWVD,EAAOK,aAAe,CACpBJ,YAAa,GACbK,MAAO,GACPJ,MAAO,IAGMF,Q,gCCcAO,EAjCY,SAAC,GAGrB,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,QAOA,OACED,EAAOE,KAAI,SAACC,EAAOC,GACjB,OACE,yBAAKC,IAAKD,EAAGR,UAAU,+BACrB,kBAAC,IAAD,CACEU,GAAE,eAAUF,GACZG,YAAa,WATrBN,EAS0CG,KAElC,yBAAKR,UAAU,+BACbT,IAAKgB,EAAMrB,IACX0B,IAAKL,EAAMK,YCtBnBC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OACb,0BAAMd,UAAU,UACd,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,gBACbc,EACA,yBAAKd,UAAU,kBACb,uBAAGA,UAAU,cAAcc,IAE3B,QASVD,EAAOZ,aAAe,CACpBa,eAAgB,MAGHD,Q,yBCcAE,EA9BY,SAAC,GAErB,IADLC,EACI,EADJA,SAEA,OACE,yBAAKhB,UAAU,+BACb,kBAAC,IAAD,CACEU,GAAG,MACHC,YAAa,cAEb,kBAAC,IAAD,CACEM,UAAU,EACVC,OAAQ,SAACC,GAAoBH,EAASG,MAErC,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,cAAhB,OACC,yCAASD,IAAT,CAAyBpB,UAAU,iBACjC,0BAAWqB,KACX,kBAAC,IAAD,MACA,uBAAGrB,UAAU,eAAb,kCCnBRsB,EAAa,SAAC,GAMb,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAV,EACI,EADJA,SAEA,OACE,yBAAKhB,UAAU,gCACb,yBAAKA,UAAU,qBACb,6BACE,yBAAKA,UAAU,2BACbT,IAAKiC,EACLZ,IAAI,SAELW,EACC,kBAAC,EAAD,MACE,OAGR,yBAAKvB,UAAU,8BACb,yBAAKA,UAAU,uBACb,kBAAC,EAAD,CACEI,OAAQqB,EACRpB,QAAS,SAACK,GAASgB,EAAahB,MAElC,kBAAC,EAAD,CACEM,SAAU,SAACW,GAAYX,EAASW,UAiB5CL,EAAWrB,aAAe,CACxB2B,WAAY,SAGCN,QCYAO,EA3De,SAAC,GAKxB,IAJLzB,EAII,EAJJA,OACA0B,EAGI,EAHJA,cACAC,EAEI,EAFJA,yBACAC,EACI,EADJA,cAEIC,EAAkB,GAClB7B,EAAO,IAAMA,EAAO,GAAGlB,MACzB+C,EAAkB7B,EAAO,GAAGlB,KAH1B,MAK4CgD,mBAASD,GALrD,mBAKGE,EALH,KAKqBC,EALrB,KAgCJ,OACE,kBAACrC,EAAA,EAAD,CAAMC,UAAU,mBACd,wBAAIA,UAAU,mBAAd,UACA,kBAAC,EAAD,CACEuB,WAAYS,EACZR,YAAaW,EACbV,aAAcrB,EACdsB,aAAc,SAACW,IAhCK,SAACA,GACzB,IAAMC,EAAgBlC,EAAOiC,GAAQnD,IACrC4C,EAAc,CAAES,WAAYD,IAC5BF,EAAoBE,GA6BYE,CAAkBH,IAC9CrB,SAAU,SAACZ,IA3BO,SAACA,GACvB,IAAMG,EAAQH,EAAO,GAErB,GAD2B,CAAC,YAAY,YAAY,YAAY,cACxCqC,SAASlC,EAAMmC,MAGlC,CACH,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WACd,IAAMC,EAAYP,EAAOQ,OACzBf,EAAoBc,GACpBpB,EAAc,CAAEsB,WAAYF,KAE9BP,EAAOU,cAAc9C,QAXrBwB,IAuB0BuB,CAAgBlD,MAE1C,wBAAIJ,UAAU,oBAAd,gC,gCChDN,SAASuD,EAAT,GAAoC,IAFhBC,EAEGC,EAAY,EAAZA,SACrB,OACE,yBAAKzD,UAAU,iBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,MAAM0D,MAAO,CAAEC,MAAM,GAAD,QANvBH,EAMwCC,EANjCG,KAAKC,IAAID,KAAKE,MAAY,IAANN,KAMJ,SAErC,yBAAKxD,UAAU,YATA,SAAAwD,GAAG,OAAKI,KAAKE,MAAY,IAANN,GAAa,KAAKO,QAAQ,GASjCC,CAAaP,KAS9CF,EAAYtD,aAAe,CACzBwD,SAAU,GAGGF,Q,iBCbFU,EAAkB,SAAC,GAEzB,IADLC,EACI,EADJA,gBACI,EACgChC,mBAAS,SADzC,mBACGiC,EADH,KACeC,EADf,KAOJ,OACE,kBAACrE,EAAA,EAAD,CAAMC,UAAU,oBACd,wBAAIA,UAAU,2BAAd,WACA,yBAAKA,UAAU,mCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,mCACVsE,SAVmB,SAAAC,GACzBH,EAAcG,EAAEC,OAUVC,cAA8B,UAAfN,EAAyB,EAAI,GAE5C,kBAACO,EAAA,EAAD,CAAQF,KAAK,QAAQG,KAAK,UAC1B,kBAACD,EAAA,EAAD,CAAQF,KAAK,OAAOG,KAAK,WAG7B,kBAACC,EAAA,EAAD,CAAWC,WAAW,UACJ,UAAfV,EACC,kBAACW,EAAA,EAAD,KACA,yBAAK9E,UAAU,sCACb,0CACA,qCAEDkE,EAAgB5D,KAAI,SAAAyE,GAAI,OAErB,yBAAKtE,IAAKsE,EAAKC,MAAOhF,UAAU,oCAC9B,2BAAI+E,EAAKC,OACT,kBAAC,EAAD,CAAavB,SAAUsB,EAAKE,aAMlC,kBAAC,IAAD,CACET,MAAM,EACNU,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAmB,EACnBC,UAAW,EACXC,2BAA4B,GAC5BC,MAAM,UACN7B,MAAO,CAAE8B,WAAY,SACrBjG,IAAK2E,OAYjBD,EAAgBhE,aAAe,CAC7BiE,gBAAiB,MAGJD,Q,QCtEFwB,EAAQ,SAAC,GAcf,IAbLC,EAaI,EAbJA,QACAC,EAYI,EAZJA,SACA3F,EAWI,EAXJA,UACA4F,EAUI,EAVJA,sBACAC,EASI,EATJA,gBACAC,EAQI,EARJA,gBACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,YACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACAtG,EACI,EADJA,MACI,EACgBoC,qBADhB,mBACGxB,EADH,KACO2F,EADP,OAE8BnE,oBAAS,GAFvC,mBAEGoE,EAFH,KAEcC,EAFd,KAiCJ,OA7BApH,qBAAU,WACRkH,EACEzC,KAAK4C,SACFC,SAAS,IACTC,UAAU,EAAG,IACd9C,KAAK4C,SACFC,SAAS,IACTC,UAAU,EAAG,OAEnB,IAEHvH,qBAAU,WACR,IAAMwH,EAAUtH,SAASuH,cAAT,wBAAwClG,IACpDiG,IACFA,EAAQ3G,WAAa,WAEtB,CAACU,IAEJvB,qBAAU,WAENyG,QACkBiB,WAAXC,aACwBD,WAAxBC,OAAOC,cAC8C,SAA5DD,OAAOC,aAAaC,QA3CS,4BA6C7BT,GAAa,KAEd,CAACX,IAEGU,EAAY,KACjB,kBAAC,IAAD,CACEZ,QAASA,EACT1F,UAAS,uBAAkBU,EAAlB,YAAwBV,GACjC6F,gBAAiBA,EACjBC,gBAAiBA,EACjBC,KAAMA,EACNC,YAAaA,EACbC,mBAAoB,WAEhBL,QACkBiB,WAAXC,aACwBD,WAAxBC,OAAOC,cAEdD,OAAOC,aAAaE,QA/DK,0BA+D+B,QAE1DhB,KAEFC,KAAMA,EACNC,SAAUA,EACVC,QAASA,EACTtG,MAAOA,GAEN6F,IAqBPF,EAAMxF,aAAe,CACnByF,QAAS,GACTC,SAAU,KACV3F,UAAW,GACX4F,uBAAuB,EACvBC,iBAAiB,EACjBC,gBAAiB,sBACjBC,KAAM,QACNC,aAAa,EACbC,mBAAoB,aACpBC,KAAM,QACNC,SAAU,GACVC,QAAS,EACTtG,MAAO,IAGM2F,Q,gBCzCAyB,EA5DiB,WAAO,ICZNhD,EDYK,EACMhC,oBAAS,GADf,mBAC7BF,EAD6B,KACdmF,EADc,OAENjF,mBAASkF,GAFH,mBAE7BC,EAF6B,KAEpBC,EAFoB,OAGVpF,mBAAS,MAHC,mBAG7BqF,EAH6B,KAGtBC,EAHsB,KAS9BC,EAAU,uCAAG,WAAOlH,GAAP,SAAAmH,EAAA,sDACjBP,GAAiB,GACjBQ,MAAM,gBAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBpI,KAAMqI,KAAKC,UAAUxH,KAEtByH,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GACJrF,QAAQC,IAAIoF,GACRA,EAAKZ,MACPC,EAASW,EAAKZ,OAEdD,EAAiCa,EC9BfhF,OAAO/C,OAAO,GAAGgI,gBDiCtCC,OAAM,SAACC,GACJd,EAAS,CAAE1H,MAAOwI,EAAIC,QAAS1I,YAAayI,EAAIC,aAEnDC,SAAQ,kBAAMrB,GAAiB,MAtBf,2CAAH,sDAyBhB,OACE,yBAAKnH,UAAU,qBACb,kBAAC,EAAD,CAAO+F,KAAK,OAAOI,SAtCvB,yRAuCKoB,GACC,kBAAC,EAAD,CACExB,KAAK,QACLjG,MAAOyH,EAAMzH,MACbqG,SAAUoB,EAAM1H,YAChB+F,uBAAuB,EACvBQ,QAAS,IACTH,mBAAoB,kBAAMuB,EAAS,SAGvC,kBAAC,EAAD,CACE1F,cAAe,SAACvB,GAAYkH,EAAWlH,IACvCyB,cAAeA,EACf5B,OAAQqI,EACR1G,yBA9C2B,WAC/ByF,EAAS,CAAE1H,MAAO,uBAAwBD,YAAa,+CA+CrD,kBAAC,EAAD,CACEqE,iBClEyBA,EDkESmD,ECjElBnD,EAAgB,GAAGwE,QACPC,MAAK,SAACjB,EAAGkB,GAAJ,OAAUA,EAAE3D,MAAQyC,EAAEzC,SAC1C4D,MAAM,EAAE,S,QCqBdC,EAhBI,WAKjB,OAJA7J,EACE,2GAIA,yBAAKe,UAAU,iBACb,kBAAC,EAAD,CACEH,YAAaA,IACbC,MAAOA,MAET,kBAAC,EAAD,QCdNiJ,IAASC,OAAO,kBAAC,EAAD,MAAS3J,SAAS4J,eAAe,W","file":"static/js/main.29df2e54.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nconst useScript = url => {\n  useEffect(() => {\n    const script = document.createElement('script');\n\n    script.src = url;\n    script.async = true;\n\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [url]);\n};\n\nexport default useScript;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tile } from 'carbon-components-react';\n\nexport const Header = ({ description, title }) => (\n  <Tile className=\"header\">\n    <div className=\"title-container\">\n      <h2 className=\"header-title\">{title}</h2>\n      <p>{description}</p>\n    </div>\n  </Tile>\n);\n\nHeader.propTypes = {\n  description: PropTypes.string,\n  links: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  description: '',\n  links: [],\n  title: '',\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  SelectableTile\n} from 'carbon-components-react';\n\nexport const ImagePicker = ({\n  images,\n  onClick,\n}) => {\n\n  const onImageClick = (id) => {\n    onClick(id);\n  }\n\n  return (\n    images.map((image, i) => {\n      return (\n        <div key={i} className=\"image-picker--section__tile\">\n          <SelectableTile\n            id={`tile-${i}`}\n            handleClick={() => { onImageClick(i); }}\n          >\n            <img className=\"image-picker--section__image\"\n              src={image.url}\n              alt={image.alt}\n            />\n          </SelectableTile>\n        </div>\n      );\n    })\n  );\n}\n\nImagePicker.propTypes = {\n  images: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImagePicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ loadingMessage }) => (\n  <span className=\"loader\">\n    <div className=\"loader-container\">\n      <div className=\"loader-dots\" />\n      {(loadingMessage) ? (\n        <div className=\"loader-message\">\n          <p className=\"ibm-type-a\">{loadingMessage}</p>\n        </div>\n      ) : null}\n    </div>\n  </span>\n);\n\nLoader.propTypes = {\n  loadingMessage: PropTypes.string,\n};\n\nLoader.defaultProps = {\n  loadingMessage: null,\n};\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport {\n  SelectableTile\n} from 'carbon-components-react';\nimport Upload32 from '@carbon/icons-react/lib/upload/32';\n\nexport const UploadImage = ({\n  onUpload,\n}) => {\n  return (\n    <div className=\"image-picker--section__tile\">\n      <SelectableTile\n        id=\"123\"\n        handleClick={() => {}}\n      >\n        <Dropzone\n          multiple={false}\n          onDrop={(acceptedFiles) => { onUpload(acceptedFiles); }}\n        >\n          {({getRootProps, getInputProps}) => (\n            <div {...getRootProps()} className=\"upload-image\">\n              <input {...getInputProps()} />\n              <Upload32 />\n              <p className=\"upload-text\">Select or drag an image</p>\n            </div>\n          )}\n        </Dropzone>\n      </SelectableTile>\n  </div>\n);\n}\n\nUploadImage.propTypes = {\n  onUpload: PropTypes.func.isRequired,\n};\n\nexport default UploadImage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImagePicker from '../ImagePicker';\nimport Loader from '../Loader';\nimport UploadImage from '../UploadImage';\n\nconst ImagePanel = ({\n  showLoader,\n  viewerImage,\n  pickerImages,\n  onSelectTile,\n  onUpload,\n}) => {\n  return (\n    <div className=\"main-image-picker__container\">\n      <div className=\"main-image-picker\">\n        <div>\n          <img className=\"main-image-picker__image\"\n            src={viewerImage}\n            alt=\"main\"\n          />\n          {showLoader ? (\n            <Loader />\n          ) : null}\n        </div>\n      </div>\n      <div className=\"image-selection__container\">\n        <div className=\"image-picker__tiles\">\n          <ImagePicker\n            images={pickerImages}\n            onClick={(id) => { onSelectTile(id); }}\n          />\n          <UploadImage\n            onUpload={(files) => { onUpload(files); }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nImagePanel.propTypes = {\n  showLoader: PropTypes.bool.isRequired,\n  viewerImage: PropTypes.string.isRequired,\n  pickerImages: PropTypes.array.isRequired,\n  onSelectTile: PropTypes.func.isRequired,\n  onUpload: PropTypes.func.isRequired,\n  viewerType: PropTypes.string,\n};\n\nImagePanel.defaultProps = {\n  viewerType: 'image',\n};\n\nexport default ImagePanel;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Tile,\n} from 'carbon-components-react';\nimport ImagePanel from '../ImagePanel';\n\nexport const ImageContainer = ({\n  images,\n  onSubmitImage,\n  handleUnsupportedFormats,\n  isClassifying,\n}) => {\n  let defaultImageUrl = '';\n  if (images[0] && images[0].url) {\n    defaultImageUrl = images[0].url;\n  }\n  const [mainDisplayImage, setMainDisplayImage] = useState(defaultImageUrl);\n\n  const submitSampleImage = (tileId) => {\n    const selectedImage = images[tileId].url;\n    onSubmitImage({ image_file: selectedImage });\n    setMainDisplayImage(selectedImage);\n  }\n\n  const submitUserImage = (images) => {\n    const image = images[0];\n    const acceptedImageTypes = ['image/gif','image/png','image/jpg','image/jpeg'];\n    if (!acceptedImageTypes.includes(image.type)) {\n      handleUnsupportedFormats();\n    }\n    else {\n      const reader = new FileReader();\n      reader.onabort = () => console.log('file reading was aborted');\n      reader.onerror = () => console.log('file reading has failed');\n      reader.onload = () => {\n        const imageData = reader.result;\n        setMainDisplayImage(imageData);\n        onSubmitImage({ image_data: imageData });\n      }\n      reader.readAsDataURL(image);\n    }\n  };\n\n  return (\n    <Tile className=\"input-container\">\n      <h4 className=\"container-title\">Images</h4>\n      <ImagePanel\n        showLoader={isClassifying}\n        viewerImage={mainDisplayImage}\n        pickerImages={images}\n        onSelectTile={(tileId) => { submitSampleImage(tileId); }}\n        onUpload={(images) => { submitUserImage(images); }}\n      />\n      <h4 className=\"container-footer\">Select An Image to Analyze</h4>\n    </Tile>\n  );\n}\n\nImageContainer.propTypes = {\n  onSubmitImage: PropTypes.func.isRequired,\n  handleUnsupportedFormats: PropTypes.func.isRequired,\n  isClassifying: PropTypes.bool.isRequired,\n  images: PropTypes.array.isRequired,\n};\n\nexport default ImageContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst formatNumber = num => (Math.round(num * 100) / 100).toFixed(2);\nconst widthNumber = num => Math.abs(Math.round(num * 100));\n\nfunction ProgressBar({ progress }) {\n  return (\n    <div className=\"bar-container\">\n      <div className=\"bar-full\">\n        <div className=\"bar\" style={{ width: `${widthNumber(progress)}%` }} />\n      </div>\n      <div className=\"progress\">{formatNumber(progress)}</div>\n    </div>\n  );\n}\n\nProgressBar.propTypes = {\n  progress: PropTypes.number,\n};\n\nProgressBar.defaultProps = {\n  progress: 0,\n};\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Accordion,\n  Tile,\n  FormGroup,\n  ContentSwitcher,\n  Switch,\n} from 'carbon-components-react';\nimport ProgressBar from '../ProgressBar';\nimport ReactJson from 'react-json-view';\n\nexport const OutputContainer = ({\n  classifyResults\n}) => {\n  const [outputType, setOutputType] = useState('table');\n\n  const onOutputTypeChange = e => {\n    setOutputType(e.name);\n  };\n\n  return (\n    <Tile className=\"output-container\">\n      <h3 className=\"output-container__title\">Results</h3>\n      <div className=\"output-container__control-panel\">\n        <ContentSwitcher\n          className=\"output-container__content-switch\"\n          onChange={onOutputTypeChange}\n          selectedIndex={outputType === 'table' ? 0 : 1}\n        >\n          <Switch name=\"table\" text=\"Table\" />\n          <Switch name=\"json\" text=\"JSON\" />\n        </ContentSwitcher>\n      </div>\n      <FormGroup legendText=\"Result\">\n        {outputType === 'table' ? (\n          <Accordion>\n          <div className=\"output-container__accordian-header\">\n            <p>Top Classes</p>\n            <p>Score</p>\n          </div>\n          {classifyResults.map(item =>\n            (\n              <div key={item.class} className=\"output-container__accordian-item\">\n                <p>{item.class}</p>\n                <ProgressBar progress={item.score} />\n              </div>\n            )\n          )}\n        </Accordion>\n      ) : (\n          <ReactJson\n            name={false}\n            enableClipboard={false}\n            displayDataTypes={false}\n            displayObjectSize={false}\n            collapsed={2}\n            collapseStringsAfterLength={20}\n            theme=\"monokai\"\n            style={{ lineHeight: '1.3em' }}\n            src={classifyResults}\n          />\n        )}\n      </FormGroup>\n    </Tile>\n  );\n}\n\nOutputContainer.propTypes = {\n  classifyResults: PropTypes.array.isRequired,\n};\n\nOutputContainer.defaultProps = {\n  classifyResults: null,\n};\n\nexport default OutputContainer;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastNotification } from 'carbon-components-react';\n\nconst NOTIFICATION_HAS_BEEN_SEEN = 'notificationHasBeenSeen';\n\nexport const Toast = ({\n  caption,\n  children,\n  className,\n  hideAfterFirstDisplay,\n  hideCloseButton,\n  iconDescription,\n  kind,\n  lowContrast,\n  onCloseButtonClick,\n  role,\n  subtitle,\n  timeout,\n  title,\n}) => {\n  const [id, setId] = useState();\n  const [hideToast, setHideToast] = useState(false);\n\n  useEffect(() => {\n    setId(\n      Math.random()\n        .toString(36)\n        .substring(2, 15) +\n        Math.random()\n          .toString(36)\n          .substring(2, 15),\n    );\n  }, []);\n\n  useEffect(() => {\n    const element = document.querySelector(`.custom-toast-${id}`);\n    if (element) {\n      element.className += 'enter';\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (\n      hideAfterFirstDisplay &&\n      typeof window !== undefined &&\n      typeof window.localStorage !== undefined &&\n      window.localStorage.getItem(NOTIFICATION_HAS_BEEN_SEEN) === 'true'\n    ) {\n      setHideToast(true);\n    }\n  }, [hideAfterFirstDisplay]);\n\n  return hideToast ? null : (\n    <ToastNotification\n      caption={caption}\n      className={`custom-toast-${id} ${className}`}\n      hideCloseButton={hideCloseButton}\n      iconDescription={iconDescription}\n      kind={kind}\n      lowContrast={lowContrast}\n      onCloseButtonClick={() => {\n        if (\n          hideAfterFirstDisplay &&\n          typeof window !== undefined &&\n          typeof window.localStorage !== undefined\n        ) {\n          window.localStorage.setItem(NOTIFICATION_HAS_BEEN_SEEN, 'true');\n        }\n        onCloseButtonClick();\n      }}\n      role={role}\n      subtitle={subtitle}\n      timeout={timeout}\n      title={title}\n    >\n      {children}\n    </ToastNotification>\n  );\n};\n\nToast.propTypes = {\n  caption: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  hideAfterFirstDisplay: PropTypes.bool,\n  hideCloseButton: PropTypes.bool,\n  iconDescription: PropTypes.string,\n  kind: PropTypes.string,\n  lowContrast: PropTypes.bool,\n  onCloseButtonClick: PropTypes.func,\n  role: PropTypes.string,\n  subtitle: PropTypes.string,\n  timeout: PropTypes.number,\n  title: PropTypes.string,\n};\n\nToast.defaultProps = {\n  caption: '',\n  children: null,\n  className: '',\n  hideAfterFirstDisplay: true,\n  hideCloseButton: false,\n  iconDescription: 'closes notification',\n  kind: 'error',\n  lowContrast: false,\n  onCloseButtonClick: () => {},\n  role: 'alert',\n  subtitle: '',\n  timeout: 0,\n  title: '',\n};\n\nexport default Toast;","import React, { useState } from 'react';\nimport ImageContainer from '../ImageContainer';\nimport OutputContainer from '../OutputContainer';\nimport Toast from '../Toast';\nimport { parseClassifyResponse, getTopTenClasses } from './utils';\n\nimport sampleImages from '../../data/images.json';\nimport defaultResponse from '../../data/mock.json';\n\nconst GDPR_DISCLAIMER =\n  'This system is for demonstration purposes only and is not intended to process Personal Data. No Personal Data is to be entered into this system as it may not have the necessary controls in place to meet the requirements of the General Data Protection Regulation (EU) 2016/679.';\n\nexport const ServiceContainer = () => {\n  const [isClassifying, setIsClassifying] = useState(false);\n  const [results, setResults] = useState(defaultResponse);\n  const [error, setError] = useState(null);\n\n  const handleUnsupportedFormats = () => {\n    setError({ title: 'Invalid file format:', description: 'Only JPGs, PNGs, and GIFs are supported' });\n  }\n\n  const onClassify = async (image) => {\n    setIsClassifying(true);\n    fetch('/api/classify', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(image),\n    })\n    .then((response) => response.json())\n    .then(data => {\n      console.log(data);\n      if (data.error) {\n        setError(data.error);\n      } else {\n        setResults(parseClassifyResponse(data));\n      }\n    })\n    .catch((err) => {\n        setError({ title: err.message, description: err.message });\n    })\n    .finally(() => setIsClassifying(false));\n  };\n\n  return (\n    <div className=\"service-container\">\n      <Toast kind=\"info\" subtitle={GDPR_DISCLAIMER}/>\n      {error && (\n        <Toast\n          kind=\"error\"\n          title={error.title}\n          subtitle={error.description}\n          hideAfterFirstDisplay={false}\n          timeout={5000}\n          onCloseButtonClick={() => setError(null)}\n        />\n      )}\n      <ImageContainer\n        onSubmitImage={(image) => { onClassify(image); }}\n        isClassifying={isClassifying}\n        images={sampleImages}\n        handleUnsupportedFormats={handleUnsupportedFormats}\n      />\n      <OutputContainer\n        classifyResults={getTopTenClasses(results)}\n      />\n    </div>\n  );\n};\n\nexport default ServiceContainer;\n","export const getTopTenClasses = (classifyResults) => {\n  const unsortedItems = classifyResults[0].classes;\n  const sortedItems = unsortedItems.sort((a, b) => b.score - a.score);\n  return sortedItems.slice(0,10);\n}\n\nexport const parseClassifyResponse = (classifyResponse) => {\n  return classifyResponse.result.images[0].classifiers;\n}\n","import React from 'react';\n\nimport './styles/main.scss';\nimport useScript from './hooks/useScript';\nimport Header from './components/Header';\nimport ServiceContainer from './components/ServiceContainer';\nimport { description, title } from './data/header.json';\n\nexport const App = () => {\n  useScript(\n    'https://cdn.jsdelivr.net/gh/watson-developer-cloud/watson-developer-cloud.github.io@master/analytics.js',\n  );\n\n  return (\n    <div className=\"app-container\">\n      <Header\n        description={description}\n        title={title}\n      />\n      <ServiceContainer />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}